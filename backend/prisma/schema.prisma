// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                Int           @id @default(autoincrement())
  firstname         String        @db.VarChar(100)
  lastname          String        @db.VarChar(100)
  email             String        @unique @db.VarChar(100)
  hashedPassword    String        @db.VarChar(255)
  role              String        @db.VarChar(100)
  profileIsComplete Boolean       @default(false)
  dateCreated       DateTime      @default(now()) @db.Timestamp(0)
  freelancer        freelancer[]
  employer          employer[]
  coordinator       coordinator[]
}

model freelancer {
  id                    Int                     @id @default(autoincrement())
  displayName           String                  @db.VarChar(100)
  activityDescription   String                  @db.VarChar(255)
  userId                Int                     @unique
  zipCode               String                  @db.VarChar(10)
  phone                 String?                 @db.VarChar(30)
  experienceYear        Int
  price                 Float
  description           String                  @db.VarChar(1000)
  acceptEmails          Boolean                 @default(false)
  siret                 Int?
  available             Boolean                 @default(false)
  dateCreated           DateTime                @default(now()) @db.Timestamp(0)
  picture               String?                 @db.VarChar(1000)
  fk_user_id            user                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documents             documents[]
  freelancer_services   freelancer_services[]
  formations            formations[]
  freelancer_expertises freelancer_expertises[]
  experience_pro        experience_pro[]
  diplomes              diplomes[]
}

model employer {
  id          Int       @id @default(autoincrement())
  displayName String    @db.VarChar(100)
  phone       String?   @db.VarChar(30)
  userId      Int       @unique
  description String    @db.VarChar(1000)
  available   Boolean   @default(false)
  dateCreated DateTime  @default(now()) @db.Timestamp(0)
  picture     String    @db.VarChar(1000)
  fk_user_id  user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  annonce     annonce[]
}

model coordinator {
  id                  Int                  @id @default(autoincrement())
  displayName         String               @db.VarChar(100)
  activityDescription String               @db.VarChar(255)
  userId              Int                  @unique
  zipCode             String               @db.VarChar(10)
  phone               String?              @db.VarChar(30)
  experienceYear      Int
  price               Float
  description         String               @db.VarChar(1000)
  acceptEmails        Boolean              @default(false)
  siret               Int?
  available           Boolean              @default(false)
  dateCreated         DateTime             @default(now()) @db.Timestamp(0)
  picture             String?              @db.VarChar(1000)
  fk_user_id          user                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documents           documents[]
  annonceCoordinator  annonceCoordinator[]
}

model documents {
  id                Int         @id @default(autoincrement())
  name              String      @db.VarChar(255)
  freelancerId      Int
  coordinatorId     Int
  documentLink      String      @db.VarChar(300)
  verified          Boolean     @default(false)
  fk_freelancer_id  freelancer  @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_coordinator_id coordinator @relation(fields: [coordinatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model freelancer_services {
  id               Int        @id @default(autoincrement())
  freelancerId     Int
  serviceId        Int
  fk_freelancer_id freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_services_id   services   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model services {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(255)
  freelancer_services freelancer_services[]
  annonce_services    annonce_services[]
}

model freelancer_expertises {
  id               Int        @id @default(autoincrement())
  freelancerId     Int
  expertiseId      Int
  fk_freelancer_id freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_expertise_id  expertises @relation(fields: [expertiseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model expertises {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar(100)
  category              String                  @db.VarChar(100)
  freelancer_expertises freelancer_expertises[]
}

model formations {
  id           Int        @id @default(autoincrement())
  level        String     @db.VarChar(255)
  institution  String     @db.VarChar(255)
  startMonth   String     @db.VarChar(255)
  startYear    Int
  endMonth     String     @db.VarChar(255)
  endYear      Int
  description  String?    @db.VarChar(500)
  dateCreated  DateTime   @default(now()) @db.Timestamp(0)
  freelancerId Int
  fk_id        freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model experience_pro {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(100)
  company      String     @db.VarChar(100)
  startMonth   String     @db.VarChar(100)
  startYear    Int
  endMonth     String     @db.VarChar(100)
  endYear      Int
  currentJob   Boolean    @default(false)
  description  String?    @db.VarChar(500)
  dateCreated  DateTime   @default(now()) @db.Timestamp(0)
  freelancerId Int
  fk_id        freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model diplomes {
  id             Int        @id @default(autoincrement())
  title          String     @db.VarChar(100)
  school         String     @db.VarChar(100)
  monthDelivered String     @db.VarChar(100)
  yearDelivered  Int
  description    String?    @db.VarChar(500)
  dateCreated    DateTime   @default(now()) @db.Timestamp(0)
  freelancerId   Int
  fk_id          freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model annonce {
  id              Int                @id @default(autoincrement())
  employerId      Int
  title           String             @db.VarChar(100)
  description     String             @db.VarChar(500)
  price           Int
  emergency       Boolean            @default(false)
  status          String             @default("En cours") @db.VarChar(100)
  annonce_service annonce_services[]
  fk_employer_id  employer           @relation(fields: [employerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  annonce_lieu    annonce_lieu[]
}

model annonce_services {
  id                   Int                 @id @default(autoincrement())
  annonceId            Int?
  serviceId            Int
  fk_annonce_id        annonce?            @relation(fields: [annonceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_service_id        services            @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  annonceCoordinator   annonceCoordinator? @relation(fields: [annonceCoordinatorId], references: [id])
  annonceCoordinatorId Int?
}

model lieu {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(100)
  annonce_lieu annonce_lieu[]
}

model annonce_lieu {
  id                   Int                 @id @default(autoincrement())
  annonceId            Int?
  lieuId               Int
  fk_annonce_id        annonce?            @relation(fields: [annonceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fk_lieu_id           lieu                @relation(fields: [lieuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  annonceCoordinator   annonceCoordinator? @relation(fields: [annonceCoordinatorId], references: [id])
  annonceCoordinatorId Int?
}

model annonceCoordinator {
  id              Int                @id @default(autoincrement())
  coordinatorId   Int
  title           String             @db.VarChar(100)
  description     String             @db.VarChar(500)
  price           Int
  emergency       Boolean            @default(false)
  status          String             @default("En cours") @db.VarChar(100)
  coordinator     coordinator        @relation(fields: [coordinatorId], references: [id])
  annonce_lieu    annonce_lieu[]
  annonce_service annonce_services[]
}
